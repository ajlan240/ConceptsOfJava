
class Laptop {
    String model;
    int price;
    // public String toString() {
    //     return model+ " : "+ price;
    // }


    // we can also generate toString() using Source action



        



    public boolean equals( Laptop that) {
        
            return this.model == that.model && this.price == that.price ;
        
    }


    @Override
    public String toString() {
        return "Laptop [model = " + model + ", price = " + price + "]";
    }

// below code is generated by source action to replace above equals() method

    // @Override
    // public int hashCode() {
    //     final int prime = 31;
    //     int result = 1;
    //     result = prime * result + ((model == null) ? 0 : model.hashCode());
    //     result = prime * result + price;
    //     return result;
    // }
    // @Override
    // public boolean equals(Object obj) {
    //     if (this == obj)
    //         return true;
    //     if (obj == null)
    //         return false;
    //     if (getClass() != obj.getClass())
    //         return false;
    //     Laptop other = (Laptop) obj;
    //     if (model == null) {
    //         if (other.model != null)
    //             return false;
    //     } else if (!model.equals(other.model))
    //         return false;
    //     if (price != other.price)
    //         return false;
    //     return true;
    // }

}


class Lesson33 {
    public static void main(String[] args) {
        Laptop obj = new Laptop();
        obj.model = "Macbook Air";
        obj.price = 1800;

        Laptop obj2 = new Laptop();
        obj2.model = "Macbook Air";
        obj2.price = 1800;

         // System.out.println(obj == obj2);
         System.out.println(obj.equals(obj2));

        System.out.println(obj.toString());  // toString() is a method in object class it returns hexadecimel value (contain sum of all properties of the object)
        //     System.out.println(obj); -> here toString is called as default (behind the scene) wich can return hexadecimel value
        //       when a method is created in class "laptop" method override takes place bcz laptop is a sub class of 'Object class'
       
        
        System.out.println(obj.equals(obj2));

    }

}